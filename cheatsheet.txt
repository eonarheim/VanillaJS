<!-- 
The philosophy of VanillaJS is to avoid using JavaScript libraries when native JavaScript can be used to achieve the same goal. JavaScript provides a wide range of capabilities that truly make it a first class language for application development.

In this talk we will learn about:

Writing fast native JavaScript
When to use a library
How to easily replicate jQuery in native JavaScript
Leveraging the functional nature of JavaScript
Patterns such as the "revealing prototype pattern"
The future of JavaScript in EcmaScript6
Come learn the magic you need to become a VanillaJS JavaScript developer!

-->


<!-- <li class="space10">Not a library</li>
   <li class="space10">Embraces Native JS</li>
   <li class="space10">Vanilla is the new black</li>
   <li class="space10">Making educated choices</li> -->      


 <div id="selectors-editor" class="code-editor">/// basic selectors
var $el = $('#my-id');
var el = document.getElementById('my-id');

var $divs = $('.div');
var divs = document.getElementsByTagName('div');

var $classes = $('.my-class');
// ie 9 and greater
var classes = document.getElementsByClassName('my-class');
// implement shim
if(!Element.prototype.getElementsByClassName){
    Element.prototype.getElementsByClassName = function(classname){
        var name = "."+classname;
        if(Element.prototype.querySelectorAll){
            return this.querySelectorAll(name);
        }else{
            elements = this.getElementsByTagName("*");
            var results = [];
            var pattern = new RegExp("(^|\\s)" + classname + "(\\s|$)");
            for(var i = 0; i < elements.length; i++){
                if(pattern.test(elements[i].className)){
                    results.push(elements[i]);
                }
            }
            return results;
        }
        
    };
}

var $elementSet = $('div.my-class');
var elementSet = document.querySelectorAll('div.my-class');

var $firstElement = $('div.my-class');
var firstElement = document.querySelector('div.my-class');
</div>


  <div id="iteration-editor" class="code-editor">
var jqElements = [];
$.each([1,2,3,4], function(i, element){
    jqElements.push(element);
});

var nativeElements = [];
[1,2,3,4].forEach(function(element, i){
    nativeElements.push(element);
});

var jqResult = $.map([1,2,3,4,5], function(i, element){
   return element * 2; 
});

var nativeResult = [1,2,3,4,5].map(function(element, i){
   return element * 2; 
});

// show es5
if(!Array.prototype.forEach){
    Array.prototype.forEach = function(fcn){
        var array = this;
        var length = array.length;
        for(var i = 0; i < length; i++){
            fcn.call(this, array[i], i);
        }        
    };
}

if(!Array.prototype.filter){
    Array.prototype.filter = function(fcn){
        var array = this;
        var length = array.length;
        var results = [];
        for(var i = 0; i< length; i++){
            if(fcn.call(this, array[i], i)){
                results.push(array[i]);
            }
        }
        return results;
    }
}

if(!Array.prototype.map){
    Array.prototype.map = function(fcn){
        var array = this;
        var length = array.length;
        var results = new Array(length);
        for(var i = 0; i < length; i++){
            results[i] = fcn.call(this, this[i], i);
        }
    };
}

 <div id="dom-editor" class="half-code-editor">var container = document.getElementById('playground');

uToast.info(container.innerText);

var newDiv = document.createElement('div');
newDiv.id = "Happy-Div";
newDiv.style.width = '20px';
newDiv.style.height = '20px';
newDiv.style.backgroundColor = 'lime';
container.appendChild(newDiv);
</div>

<div id="animation-editor" class="half-code-editor">if(!window.requestAnimationFrame){
    window.requestAnimationFrame = 
    window.webkitRequestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    window.msRequestAnimationFrame ||
    window.oRequestAnimationFrame ||
    function(callback){window.setTimeout(callback, 1000/60)};
}


var fadeIn = function(id, time){
    var el = document.getElementById(id);
    el.style.opacity = 0.0;
    var rate = 1.0/time;
    var now = Date.now();
    var lastTime = Date.now();
    var delta;
    window.requestAnimationFrame(function fade(){
        now = Date.now();
        delta = now - lastTime;
        if(parseFloat(el.style.opacity) < 1.0){
            window.requestAnimationFrame(fade);    
        }
        el.style.opacity = parseFloat(el.style.opacity) + rate*delta;
        lastTime = now;
    });
};

fadeIn('angry-baby', 1000);</div>


  <div id="ajax-editor" class="code-editor">var request = new XMLHttpRequest();
request.responseType = 'json';
request.open('GET', 'sample.json');
request.onload = function(){
    uToast.info("Data!", JSON.stringify(request.response));   
};
request.send();

</div>


 <div id="modules-editor" class="code-editor">
var pollutingTheGlobal = 10;
// encapsulate GeneralMills functionality
var GeneralMills;
(function(GeneralMills){
    
    GeneralMills.myVarsDontPollute = 11;
    
    GeneralMills.theBestFunction = function(a, b){
        return a + b;
    };

})(GeneralMills || (GeneralMills = {}));


alert(myVarsDontPollute);
alert(GeneralMills.myVarsDontPollute);</div>

<div id="revealing-module-editor" class="code-editor">var Car = function(color){
    var me = this;
    me.color = color || "red";
    me.speed = 0;
    me.accelerate = function(speed){
        me.speed += speed;  
    };
    
    me.paint = function(color){
        me.color = color;
    };
    return me;
};</div>


  <div id="prototype-editor" class="code-editor">var Car = function(color){
    this.color = color || "red";
    this.speed = 0;
};

Car.prototype.accelerate = function(speed){
    this.speed += speed;
};

Car.prototype.paint = function(color){
    this.color = color;  
};
</div>

        <div id="revealing-prototype-editor" class="code-editor">var Car = function(color){
    this.speed = 0;
    this.color = color || "red";
};

Car.prototype = (function(){
  var me = {};
  var increaseSpeed = function(speed){
      this.speed += speed;
  };
  
  me.accelerate = function(speed){
      increaseSpeed.call(this, speed);
  };
  
  me.paint = function(color){
      this.color = color;
  }; 
  return me;  
})();


var batmobile = new Car('black');
batmobile.accelerate(10);
uToast.info("Batmobile's speed", batmobile.speed);

</div>

   <div id="singleton-editor" class="code-editor">var Logger = function(){    
    if(!Logger._instance){
        Logger._instance = this;
    }
    return Logger._instance;
};
// static property and method
Logger._instance = null;
Logger.getInstance = function(){
    return new Logger();
};

Logger.prototype.info = function(){
    console.log.apply(console, Array.prototype.slice.call(arguments));
};</div>

  <div id="inheritance-editor" class="code-editor">var Class = function(){};

Class.extend = function(props){
   var _super = this.prototype;
   var SubClass = function(){
      if(this.init){
         this.init.apply(this, Array.prototype.slice.call(arguments));
      }
   };       
    
   // Create our super class and populate
   var SuperClass = new this();    
   for(var prop in props){
      SuperClass[prop] = props[prop];
   } 

   SubClass.prototype.constructor = SubClass;
   SubClass.prototype = SuperClass;
   SubClass.prototype._super = SuperClass;
   SubClass.extend = Class.extend;
    
   return SubClass;
};</div>


 <div id="interfaces-editor" class="code-editor">Class.implements = function(methods){
   for(var i = 0; i < methods.length; i++){
      var method = methods[i];
      if(!this.prototype[method] || typeof this.prototype[method] !== "function"){
         throw new Error("Object does not implement " + method);
      }
   }
   return true;
};</div>